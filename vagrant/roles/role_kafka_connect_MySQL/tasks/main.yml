#############################################################################

###
### Add MySql connector
###

- name: Check if MySQL connector jar is already present
  stat:
    path: /usr/share/java/kafka-connect-jdbc/mysql-connector-java-5.1.47.jar
  register: MySQL_connector

- name: Download and unzip MySQL connector jar
  unarchive:
    src: https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.47.zip
    dest: /tmp
    remote_src: yes
    mode: 0775
  when: MySQL_connector.stat.exists == False

- name: Move MySQL to correct folder
  copy:
    src: /tmp/mysql-connector-java-5.1.47/mysql-connector-java-5.1.47.jar
    dest: /usr/share/java/kafka-connect-jdbc/mysql-connector-java-5.1.47.jar
    remote_src: yes
  when: MySQL_connector.stat.exists == False

# By using a PUT request we either create a new connector (response 201) or update the existing (response 200)
- name: Create or update MySQL connector
  uri:
    url: "http://{{ kafka_service_ip_address }}:{{ port_kafka_connect }}/connectors/{{mysql_connector_name}}/config"
    method: PUT
    body: "{{ lookup('template','templates/kafka-connect-jdbc-source.json.j2') }}"
    status_code: 201, 200
    body_format: json
  when:
    - inventory_hostname in groups['kafka_worker_nodes'][0]

- name: Check connector status
  uri:
    url: "http://{{ kafka_service_ip_address }}:{{ port_kafka_connect }}/connectors/{{mysql_connector_name}}/status"
    method: GET
    status_code: 200
    body_format: json
  register: response
  when:
    - inventory_hostname in groups['kafka_worker_nodes'][0]

- name: Validate if connector is in "RUNNING" state
  fail:
    msg: "The connector {{mysql_connector_name}} is not running"
  when: response.state != "RUNNING"
