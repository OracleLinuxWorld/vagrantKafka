###
### Schema Registry & Connect AVRO properties
### (schema-registry.properties, connect-avro-distributed.properties & connect-avro-standalone.properties)
###

# Security protocol specific for Schema Registry
kafka_schemaregistry_security_protocol: "{{ kafka_generic_security_protocol }}"

# The name of the topic to store schemas in
schema_registry_kafkastore_topic: "_schemas"

schema_registry_config_storage_replication_factor: "3"
schema_registry_offset_storage_replication_factor: "3"
schema_registry_status_storage_replication_factor: "3"

connect_avro_group_id: "connect-cluster"


###
### Kafka REST Proxy
###

### /etc/kafka-rest/kafka-rest.properties
kafka_rest_id: "kafka-rest-test-server"
kafka_rest_schema_registry_url: "http://{{ kafka_service_ip_address }}:8081"
kafka_rest_zookeeper_connect: "{{ kafka_zookeeper_connect}}"
kafka_rest_bootstrap_servers: "{{ kafka_bootstrap_servers }}"
kafka_rest_listeners: http://0.0.0.0:{{port_kafka_rest_proxy}}


###
### Kafka Connect REST
###

kafka_connect_security_protocol: "{{ kafka_generic_security_protocol }}"

kafka_connect_group_id: "connect-cluster"
kafka_connect_offset_storage_topic: "connect-offsets"
kafka_connect_offset_storage_replication_factor: "3"
kafka_connect_config_storage_topic: "connect-configs"
kafka_connect_config_storage_replication_factor: "3"
kafka_connect_status_storage_topic: "connect-status"
kafka_connect_status_storage_replication_factor: "3"


###
### role_kafka_connect_MySQL
###

#The name of the MySQL connector
mysql_connector_name:   'jdbc_source_mysql'


###
### role_kafka_sink_ElasticSearch
###

elastic_server_url:     "http://{{ groups['elasticsearch_nodes'][0] }}:9200"
elastic_sink_name:       'elastic_sink_connector'



###
### MirrorMaker "confluent-mirrormaker" systemctl service
### Note: only needs to run at the TARGET destination
###

### Config files
mirrormaker_consumer_config: "/etc/kafka/consumer_dc1_to_dc2.properties"
mirrormaker_producer_config: "/etc/kafka/producer_dc1_to_dc2.properties"

### Space separated list of topics needed to be replicated
mirrormaker_topic_whitelist: "test test2 test3 test4 test5"

# Number of parallel streams
mirrormaker_num_streams: "3"
mirrormaker_abort_on_failure: "true"


###
### MirrorMaker consumer & producer config files
### Note: only needs to run at the TARGET destination
###

mirrormaker_log4j_rootLogger: "WARN, stderr, file"

### Variables for SOURCE target (aka: dc1)

# Example content: "172.28.129.201:9092,172.28.129.202:9092,172.28.129.203:9092"
mirrormaker_source_bootstrap_servers: "
{%- for node in groups['dc1_kafka_brokers'] -%}
{{ node }}:{{ port_kafka_broker }}{% if not loop.last %},{% endif %}
{%- endfor %}
"

mirrormaker_source_group_id: "mirrormaker-group-source"
mirrormaker_source_client_id: "mirror_maker_consumer"
mirrormaker_source_exclude_internal_topics: "true"


### Variables for DESTINATION target (aka: dc2)

# Example content: "172.28.129.221:9092,172.28.129.222:9092,172.28.129.223:9092"
mirrormaker_target_bootstrap_servers: "
{%- for node in groups['dc2_kafka_brokers'] -%}
{{ node }}:{{ port_kafka_broker }}{% if not loop.last %},{% endif %}
{%- endfor %}
"

# (valid values are none, gzip, snappy, or lz4)
mirrormaker_target_compression_type: "none"
mirrormaker_target_client_id: "mirror_maker_producer"
mirrormaker_target_max_in_flight_requests_per_connection: "1"
mirrormaker_target_retries: "Int.MaxValue"
mirrormaker_target_acks: "all"
mirrormaker_target_block_on_buffer_full: "true"

# Note that enabling idempotence requires
#   max.in.flight.requests.per.connection to be less than or equal to 5,
#   retries to be greater than 0 and
#   acks must be 'all'.
# If these values are not explicitly set by the user, suitable values will be chosen.
# If incompatible values are set, a ConfigException will be thrown.
mirrormaker_target_enable_idempotence: "true"
